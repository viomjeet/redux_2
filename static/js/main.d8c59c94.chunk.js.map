{"version":3,"sources":["redux/action/action.js","components/TodosList.js","components/SelectedTodos.js","App.js","serviceWorker.js","redux/reducer/reducers.js","redux/index.js","index.js"],"names":["checkChange","id","checked","type","TodosList","todos","dispatch","className","map","items","key","completed","value","onChange","e","target","title","SelectedTodos","x","filter","length","index","App","useSelector","state","data","useDispatch","Boolean","window","location","hostname","match","todosList","action","item","parseInt","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d8c59c94.chunk.js","sourcesContent":["export default function checkChange(id, checked) {\r\n    return {\r\n        type: \"CHECK_CHANGE\",\r\n        id: id,\r\n        checked: checked,\r\n    }\r\n}\r\n\r\n","import React, { Fragment } from 'react'\r\nexport default function TodosList({ todos, dispatch, checkChange }) {\r\n    return (\r\n        <Fragment>\r\n            <h5>Todos List</h5>\r\n            <hr ></hr>\r\n            <ul className=\"ullist\">\r\n                {todos.map(items => {\r\n                    return (\r\n                        <li key={items.id} className={items.completed ? 'bg-gray' : 'bg-light'}>\r\n                            <label>\r\n                                <input type=\"checkbox\" value={items.id}\r\n                                    onChange={(e) => dispatch(checkChange(e.target.value, e.target.checked))}\r\n                                    checked={items.completed} />\r\n                                    &nbsp;{items.id}.&nbsp;{items.title}\r\n                            </label>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </Fragment>\r\n    )\r\n}\r\n","import React, { Fragment } from 'react'\r\n\r\nexport default function SelectedTodos({ todos }) {\r\n    const x = todos.filter(items => items.completed)\r\n    return (\r\n        <Fragment>\r\n            <h5>Selected Todos</h5>\r\n            <hr ></hr>\r\n            <div className=\"selected_list\">\r\n                {x.length > 0 ?\r\n                    <Fragment>\r\n                        {todos.map((items, index) => {\r\n                            return (\r\n                                <Fragment key={index}>\r\n                                    {items.completed ? <span key={index}>{items.id}.&nbsp;{items.title}</span> : \"\"}\r\n                                </Fragment>\r\n                            )\r\n                        })}\r\n                    </Fragment>\r\n                    : <em className=\"small\">No Items to view</em>\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n","import React, { Fragment } from 'react';\nimport './assets/css/style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport checkChange from './redux/action/action';\nimport TodosList from './components/TodosList';\nimport SelectedTodos from './components/SelectedTodos';\n\nfunction App() {\n  const state = useSelector(state => state)\n  const todos = state.data;\n  const dispatch = useDispatch();\n  return (\n    <Fragment>\n      <div className=\"bg-light mb-3 border-bottom\">\n        <div className=\"container\">\n          <h4 className=\"m-0 pt-3 pb-3\">React Redux </h4>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-6 order-2 order-md-12 mb-4\">\n            <TodosList todos={todos} dispatch={dispatch} checkChange={checkChange} />\n          </div>\n          <div className=\"col-md-6 order-1 order-md-12 mb-4\">\n            <SelectedTodos todos={todos} />\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const todos = {\r\n    data: [\r\n        { id: 1, title: \"Delectus aut autem\", completed: false },\r\n        { id: 2, title: \"Wuis ut nam fac officia\", completed: false },\r\n        { id: 3, title: \"Fugiat veniam minus\", completed: false },\r\n        { id: 4, title: \"Et porro tempora\", completed: true },\r\n        { id: 5, title: \"Luasi adipisci qident\", completed: false },\r\n        { id: 6, title: \"Quibusdam volupta omnis\", completed: false },\r\n        { id: 7, title: \"Epedita consequa in\", completed: false },\r\n        { id: 8, title: \"Adipisci enim quam ut ab\", completed: true },\r\n        { id: 9, title: \"Molestiae perspi ipsa\", completed: false },\r\n        { id: 10, title: \"Eoloremque quias aut\", completed: true }\r\n    ]\r\n}\r\n\r\nconst todosList = (state = todos, action) => {\r\n    let completed = state.data.map(item => item.id === parseInt(action.id) && (item.completed = action.checked))\r\n    switch (action.type) {\r\n        case 'CHECK_CHANGE':\r\n            return {\r\n                ...state,\r\n                completed: completed,\r\n            }\r\n        default:\r\n            return {\r\n                ...state\r\n            }\r\n    }\r\n}\r\nexport default todosList;","import { createStore } from 'redux';\r\nimport todosList from './reducer/reducers';\r\nconst store = createStore(todosList, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/'\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}